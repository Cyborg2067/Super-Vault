https://basescan.org/address/0x8ad1DEAD08c9471F401A1d77672a33B863157432

// WebSite: https://cyborg2067.fun/

// e-mail: contact@cyborg2067.fun

// https://twitter.com/Cyborg2067

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.26;

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {
        unchecked {
            c = a + b;
            if (c < a) c = 0;
            else success = true;
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {
        unchecked {
            if (b <= a) {
                c = a - b;
                success = true;
            }
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {
        unchecked {
            if (a == 0) success = true;
            else {
                c = a * b;
                if (c / a != b) {
                    c = 0;
                } else {
                    success = true;
                }
            }
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {
        unchecked {
            if (b > 0) {
                c = a / b;
                success = true;
            }
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 c) {
        unchecked {
            if (b > 0) {
                c = a % b;
                success = true;
            }
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        unchecked {
            c = a + b;
            require(c >= a, "SafeMath: addition overflow");
        }
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        unchecked {
            require(b <= a, "SafeMath: subtraction overflow");
            c = a - b;
        }
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        unchecked {
            c = a * b;
            require(c / a == b, "SafeMath: multiplication overflow");
        }
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {
        unchecked {
            require(b > 0, "SafeMath: division by zero");
            c = a / b;
        }
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {
        unchecked {
            require(b > 0, "SafeMath: modulo by zero");
            return a % b;
        }
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {
        unchecked {
            require(b <= a, errorMessage);
            c = a - b;
        }
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {
        unchecked {
            require(b > 0, errorMessage);
            c = a / b;
        }
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {
        unchecked {
            require(b > 0, errorMessage);
            c = a % b;
        }
    }
}

library SafeERC20 {
    using SafeMath for uint256;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(token.transfer.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "SafeERC20: ERC20 transfer failed");
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "SafeERC20: ERC20 transferFrom failed");
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve non-zero to non-zero allowance");
        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(token.approve.selector, spender, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "SafeERC20: ERC20 approve failed");
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        safeApprove(token, spender, newAllowance);
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        safeApprove(token, spender, newAllowance);
    }
}

abstract contract ReentrancyGuard {
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;
    uint256 private _status;

    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        _status = NOT_ENTERED;
    }

    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    error OwnableUnauthorizedAccount(address account);
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library Address {
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.call(data);
        return _verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    function _verifyCallResultFromTarget(address target, bool success, bytes memory returndata, string memory errorMessage) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                require(target.code.length > 0, "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        if (returndata.length > 0) {
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract SuperVault is Context, Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    mapping(address => mapping(address => uint256)) private _deposits; 

    IERC20 public token;
    address public depositor;
    address public locker;
    bool public isLocked;

    event Deposit(address indexed Depositor, address indexed token, uint256 amount);
	event Withdrawal(address indexed Depositor, address indexed token, uint256 amount);
	event Lock(address indexed Locker, uint256 amount);
	event unLock(address indexed Locker, uint256 amount);
	event LockedEnable(bool enabled);

    	constructor(address Owner, address Contract, address Depositor, address Locker) Ownable(Owner) {
        token = IERC20(Contract); 
        depositor = Depositor;
        locker = Locker;
        isLocked = false;
    }

    modifier onlyDepositor() {
        require(_msgSender() == depositor, "Only depositor allowed");
        _;
    }

    modifier onlyLocker() {
        require(_msgSender() == locker, "Only locker allowed");
        _;
    }

    modifier unLocked() {
        require(!isLocked, "Vault is locked");
        _;
    }

    function lock() external nonReentrant onlyLocker {
    require(locker != address(0), "Valid locker address");
    require(!isLocked, "Vault is already locked");
    isLocked = true;
    emit LockedEnable(true);
}

    function unlock() external nonReentrant onlyLocker {
    require(locker != address(0), "Valid locker address");
    require(isLocked, "Vault is not locked");
    isLocked = false;
    emit LockedEnable(false);
}

    function deposit(address tokenAddress, uint256 amount) external nonReentrant onlyDepositor unLocked {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0, "Amount must be greater than zero");

        IERC20 tokenContract = IERC20(tokenAddress);
        require(tokenContract.allowance(_msgSender(), address(this)) >= amount, "Allowance not sufficient");

        tokenContract.safeTransferFrom(_msgSender(), address(this), amount);

        _deposits[_msgSender()][tokenAddress] = _deposits[_msgSender()][tokenAddress].add(amount);

        emit Deposit(_msgSender(), tokenAddress, amount);
    }

    function withdraw(address tokenAddress, uint256 amount) external nonReentrant onlyDepositor unLocked {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0, "Amount must be greater than zero");

        uint256 senderBalance = _deposits[_msgSender()][tokenAddress];
        require(senderBalance >= amount, "Withdraw amount exceeds deposit");

        IERC20 tokenContract = IERC20(tokenAddress);
        tokenContract.safeTransfer(_msgSender(), amount);

        _deposits[_msgSender()][tokenAddress] = senderBalance.sub(amount);

        emit Withdrawal(_msgSender(), tokenAddress, amount);
    }

    function balance(address _depositor, address tokenAddress) public view returns (uint256) {
    require(tokenAddress != address(0), "Invalid token address");
    return _deposits[_depositor][tokenAddress];
}

    function _msgSender() internal view override returns (address) {
        return msg.sender;
    }
}
